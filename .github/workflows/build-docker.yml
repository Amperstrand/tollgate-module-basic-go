name: Build and Publish

on:
  push:

## Add global env vars for the whole workflow
env:
  PACKAGE_NAME: "tollgate-module-basic-go"
  ARCHITECTURE: "aarch64"
  GOARCH: "arm64"
#  DEBUG: "true"
  # GOMIPS: "softfloat"

jobs:
  build-package:
    runs-on: ubuntu-latest
    container:
      image: openwrt/sdk:mediatek-filogic-23.05.3
      options: --user root # https://github.com/actions/checkout/issues/1575#issuecomment-2536435128

    steps:
      - uses: actions/checkout@v3
        with:
          path: ${{ env.PACKAGE_NAME }}/

      - name: Move sources to sdk folder
        run: |
          mv ${{ env.PACKAGE_NAME }} /builder/package/${{ env.PACKAGE_NAME }}

      - name: Install Golang
        run: |
          # Add golang-backports repository
          echo "deb https://deb.debian.org/debian bookworm-backports main" > /etc/apt/sources.list.d/backports.list
          apt-get update
          
          # Install Go from backports
          apt-get install -y -t bookworm-backports golang-go

      - name: Configure SDK
        run: |
          cd /builder

          # Generate default configuration
          make defconfig

          # Update configuration for our needs
          echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=y" >> .config
          
      - name: Compile Package
        run: |
          cd /builder
          env GOARCH=${{ env.GOARCH }} GOMIPS=${{ env.GOMIPS }} make -j$(nproc) V=sc package/${{ env.PACKAGE_NAME }}/compile ${{ env.DEBUG == 'true' && 'V=sc' || '' }}

      - name: List output package(s)
        run: |
          PACKAGE_PATH=$(find /builder/bin/packages -name "*.ipk" -type f | head -n1)
          
          if [ -z "$PACKAGE_PATH" ]; then
            echo "❌ No .ipk package found in /builder/bin/packages"
            exit 1
          fi

          echo "✅ Found package at: $PACKAGE_PATH"
          
          # Extract model from filename for later use
          FILENAME=$(basename "$PACKAGE_PATH")
          echo "PACKAGE_FILENAME=$FILENAME" >> $GITHUB_ENV
          
          # Copy file to a location GitHub can access
          mkdir -p /github/workspace/artifacts
          cp "$PACKAGE_PATH" "/github/workspace/artifacts/$FILENAME"

      - name: GitHub Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ env.PACKAGE_NAME }}
          path: /github/workspace/artifacts/${{ env.PACKAGE_FILENAME }}
          retention-days: 5
  
  publish-metadata:
    needs: build-package
    runs-on: ubuntu-latest
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package-${{ env.PACKAGE_NAME }}
          path: ./artifacts
      
      - name: Prepare package metadata
        id: package_info
        run: |
          PACKAGE_PATH=$(find ./artifacts -name "*.ipk" -type f | head -n1)
          FILENAME=$(basename "$PACKAGE_PATH")
          
          # Extract model from filename
          if [[ $FILENAME =~ _aarch64_cortex-a53 ]]; then
            MODEL="aarch64_cortex-a53"
          else
            MODEL="generic"
          fi
          
          # Calculate file size
          FILE_SIZE=$(stat -c%s "$PACKAGE_PATH")
          
          echo "PACKAGE_PATH=$PACKAGE_PATH" >> $GITHUB_ENV
          echo "PACKAGE_SIZE=$FILE_SIZE" >> $GITHUB_ENV
          echo "MODEL=$MODEL" >> $GITHUB_ENV
          echo "PACKAGE_FILENAME=${{ env.PACKAGE_NAME }}-${MODEL}-${{ env.GOARCH }}.ipk" >> $GITHUB_ENV

      - name: Blossom Artifact upload
        id: blossom_upload
        uses: Origami74/upload-blossom-action@improve-io
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.PACKAGE_PATH }}
     
      - name: Process Blossom response
        run: |
          echo "Upload outputs:"
          echo "  URL: ${{ steps.blossom_upload.outputs.url }}"
          echo "  Hash: ${{ steps.blossom_upload.outputs.hash }}"
          echo "  Size: ${{ env.PACKAGE_SIZE }} bytes"
          
          echo "PACKAGE_URL=${{ steps.blossom_upload.outputs.url }}" >> $GITHUB_ENV
          echo "PACKAGE_HASH=${{ steps.blossom_upload.outputs.hash }}" >> $GITHUB_ENV

      - name: Publish Package NIP-94 Metadata
        id: publish_package
        uses: OpenTollGate/nostr-publish-file-metadata-action/python@main
        with:
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/
          url: ${{ env.PACKAGE_URL }}
          mimeType: application/x-opkg
          fileHash: ${{ env.PACKAGE_HASH }}
          originalHash: ${{ env.PACKAGE_HASH }}
          filename: "${{ env.PACKAGE_FILENAME }}"
          content: |
            {
              "description": "TollGate ${{ env.PACKAGE_NAME }} OpenWRT package for ${{ env.MODEL }}",
              "module": "${{ env.PACKAGE_NAME }}",
              "version": "0.0.1"
            }
          nsec: ${{ secrets.NSEC }}
          size: ${{ env.PACKAGE_SIZE }}
          architecture: "${{ env.GOARCH }}"

      # Debug the outputs to see what's available
      - name: Debug Event ID
        run: |
          echo "EVENT_ID from env: ${{ env.EVENT_ID }}"
          echo "NOTE_ID from env: ${{ env.NOTE_ID }}"
          echo "Output from publish step: ${{ steps.publish_package.outputs.eventId || 'not set' }}"
          echo "Outputs available:"
          echo "${{ toJSON(steps.publish_package.outputs) }}"

      - name: Verify Package NIP-94 Event
        id: verify_package
        # Use environment variable instead of step output
        if: env.EVENT_ID != ''
        uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
        with:
          eventId: ${{ env.EVENT_ID }}
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/

      - name: Check Package Publication
        # Only run this step if the verification ran and failed
        if: steps.verify_package.outcome == 'failure'
        run: |
          echo "❌ Failed to verify package publication on relays"
          exit 1
          
      # Add a step to handle the case where EVENT_ID is empty
      - name: Check Event ID
        if: env.EVENT_ID == ''
        run: |
          echo "❌ No event ID was generated by the publish step"
          exit 1

      - name: Build Summary
        run: |
          echo "Build Summary for ${{ matrix.target.name }}:"
          echo "✅ Binary successfully built and published"
          echo "✅ Package successfully built and published"
          echo "Binary URL: ${{ steps.upload_binary.outputs.blossomUrl }}"
          echo "Package URL: ${{ steps.upload_package.outputs.blossomUrl }}"

  install-os:
    needs: build-package
    runs-on: ubuntu-latest
    steps:
      - name: Trigger OS Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenTollGate/tollgate-os
          event-type: update-release-json

