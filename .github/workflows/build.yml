name: Build and Publish

on:
  workflow_run:
    workflows: ["Prebuild Golang"]
    types:
      - completed
  repository_dispatch:
    types: [module-build-completed]
  push:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

# Add global env vars for the whole workflow
env:
  DEFAULT_MODULE_NAME: "basic"

jobs:
  build-package:
    #needs: build-binary
    runs-on: ubuntu-latest
    env:
      MODULE_NAME: "basic"
    strategy:
      matrix:
        target: [
          {
            name: "ath79-nor",
            goarch: "mips",
            gomips: "softfloat",
            model: "gl-ar300m16",
            platform: "ath79",
            subtarget: "generic",
            profile: "glinet_gl-ar300m16-nor",
            arch: "mips_24kc",
            device: "glinet,gl-ar300m16-nor",
            rootfs_size: "16384k",
            kernel_size: "2048k"
          },
          {
            name: "ath79-nand", 
            goarch: "mips", 
            gomips: "softfloat", 
            model: "gl-ar300m", 
            platform: "ath79", 
            subtarget: "generic", 
            profile: "glinet_gl-ar300m",
            arch: "mips_24kc",
            device: "glinet,gl-ar300m"
          },
          {
            name: "glmt3000", 
            goarch: "arm64", 
            model: "gl-mt3000", 
            platform: "mediatek", 
            subtarget: "filogic", 
            profile: "glinet_gl-mt3000",
            arch: "aarch64_cortex-a53"
          },
          {
            name: "glmt6000", 
            goarch: "arm64", 
            model: "gl-mt6000", 
            platform: "mediatek", 
            subtarget: "filogic",
            profile: "glinet_gl-mt6000", 
            arch: "aarch64_cortex-a53"
          }
        ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      # Add this early in the job
      - name: Set Environment Variables
        run: |
          echo "MODULE_NAME=${MODULE_NAME:-basic}" >> $GITHUB_ENV
          echo "MODEL=${{ matrix.target.model }}" >> $GITHUB_ENV
          
          # Get architecture from matrix or detect using pure shell syntax
          ARCH_VALUE="${{ matrix.target.arch }}"
          if [ -z "$ARCH_VALUE" ]; then
              ARCH_VALUE=$(uname -m)
          fi
          
          echo "ARCH=$ARCH_VALUE" >> $GITHUB_ENV
          echo "PACKAGE_FILENAME=${MODULE_NAME:-basic}-${{ matrix.target.model }}-${ARCH_VALUE}.ipk" >> $GITHUB_ENV
          echo "PLATFORM=${{ matrix.target.platform }}" >> $GITHUB_ENV

      # Download prebuilt golang packages
      - name: Download Prebuilt Golang
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: prebuild-golang.yml
          workflow_conclusion: success
          name: golang-${{ matrix.target.model }}-${{ matrix.target.platform }}-${{ matrix.target.subtarget }}
          path: prebuilt/
          repo: OpenTollGate/tollgate-sdk
          github_token: ${{ secrets.GITHUB_TOKEN }}


      - name: Find Golang Package
        id: find_golang
        run: |
          GOLANG_IPK=$(find prebuilt -name "golang*.ipk" | head -n 1)
          echo "Found golang package: $GOLANG_IPK"
          echo "golang_ipk=$GOLANG_IPK" >> $GITHUB_OUTPUT

      - name: Build OpenWRT Package
        id: build_package
        uses: OpenTollGate/tollgate-sdk@main
        with:
          model: ${{ matrix.target.model }}
          platform: ${{ matrix.target.platform }}
          subtarget: ${{ matrix.target.subtarget }}
          module: tollgate-module-basic-go
          prebuilt_golang: ${{ steps.find_golang.outputs.golang_ipk }}
          # device: ${{ matrix.target.device }}
          # rootfs_size: ${{ matrix.target.rootfs_size }}
          # kernel_size: ${{ matrix.target.kernel_size }}

      - name: Debug output
        run: |
          echo "Attempting to list built package:"
          ls -R /tmp/openwrt-sdk/openwrt-sdk-*/bin/packages

      - name: Upload Package to Blossom
        id: upload_package
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.PACKAGE_FULLPATH }}
          nostrPrivateKey: ${{ secrets.NSECBECH }}
          desiredExtension: ipk

      # Add a step to save the outputs to environment variables
      - name: Save Upload Results to Environment
        run: |
          # Debug first
          echo "Upload outputs:"
          echo "  URL: ${{ steps.upload_package.outputs.url }}"
          echo "  Hash: ${{ steps.upload_package.outputs.hash }}"
          echo "  Success: ${{ steps.upload_package.outputs.success }}"
          
          # Save to environment variables
          echo "PACKAGE_URL=${{ steps.upload_package.outputs.url }}" >> $GITHUB_ENV
          echo "PACKAGE_HASH=${{ steps.upload_package.outputs.hash }}" >> $GITHUB_ENV
          
          # Get file size directly if needed
          if [ -f "${{ env.PACKAGE_FULLPATH }}" ]; then
            FILE_SIZE=$(stat -c%s "${{ env.PACKAGE_FULLPATH }}")
            echo "PACKAGE_SIZE=$FILE_SIZE" >> $GITHUB_ENV
            echo "File size: $FILE_SIZE bytes"
          else
            echo "WARNING: Package file not found at ${{ env.PACKAGE_FULLPATH }}"
          fi

      - name: Publish Package NIP-94 Metadata
        id: publish_package
        if: steps.upload_package.outputs.success == 'true'
        uses: OpenTollGate/nostr-publish-file-metadata-action/python@main
        with:
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/
          url: ${{ env.PACKAGE_URL }}
          mimeType: application/x-opkg
          fileHash: ${{ env.PACKAGE_HASH }}
          originalHash: ${{ env.PACKAGE_HASH }}
          filename: "${{ env.PACKAGE_FILENAME }}"
          content: |
            {
              "description": "TollGate Module Relay OpenWRT package for ${{ env.MODEL }}",
              "module": "${{ env.MODULE_NAME }}",
              "model": "${{ env.MODEL }}",
              "version": "0.0.1"
            }
          nsec: ${{ secrets.NSEC }}
          size: ${{ env.PACKAGE_SIZE }}
          architecture: "${{ env.ARCH }}"

      - name: Verify Package NIP-94 Event
        id: verify_package
        if: steps.publish_package.outputs.eventId != ''
        uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
        with:
          eventId: ${{ steps.publish_package.outputs.eventId }}
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/

      # - name: Check Package Publication
      #   if: steps.verify_package.outcome != 'success'
      #   run: |
      #     echo "❌ Failed to verify package publication on relays"
      #     exit 1

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.target.model }}
          path: ${{ env.PACKAGE_FULLPATH }}
          retention-days: 5

      - name: Build Summary
        run: |
          echo "Build Summary for ${{ matrix.target.name }}:"
          echo "✅ Binary successfully built and published"
          echo "✅ Package successfully built and published"
          echo "Binary URL: ${{ steps.upload_binary.outputs.blossomUrl }}"
          echo "Package URL: ${{ steps.upload_package.outputs.blossomUrl }}"

  install-os:
    needs: build-package
    runs-on: ubuntu-latest
    steps:
      - name: Trigger OS Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenTollGate/tollgate-os
          event-type: update-release-json

